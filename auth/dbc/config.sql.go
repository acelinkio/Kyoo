// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: config.sql

package dbc

import (
	"context"
)

const deleteConfig = `-- name: DeleteConfig :one
delete from config
where key = $1
returning
	key, value
`

func (q *Queries) DeleteConfig(ctx context.Context, key string) (Config, error) {
	row := q.db.QueryRow(ctx, deleteConfig, key)
	var i Config
	err := row.Scan(&i.Key, &i.Value)
	return i, err
}

const loadConfig = `-- name: LoadConfig :many
select
	key, value
from
	config
`

func (q *Queries) LoadConfig(ctx context.Context) ([]Config, error) {
	rows, err := q.db.Query(ctx, loadConfig)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Config
	for rows.Next() {
		var i Config
		if err := rows.Scan(&i.Key, &i.Value); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const saveConfig = `-- name: SaveConfig :one
insert into config(key, value)
	values ($1, $2)
on conflict (key)
	do update set
		value = excluded.value
	returning
		key, value
`

type SaveConfigParams struct {
	Key   string `json:"key"`
	Value string `json:"value"`
}

func (q *Queries) SaveConfig(ctx context.Context, arg SaveConfigParams) (Config, error) {
	row := q.db.QueryRow(ctx, saveConfig, arg.Key, arg.Value)
	var i Config
	err := row.Scan(&i.Key, &i.Value)
	return i, err
}
